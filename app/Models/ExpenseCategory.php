<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class ExpenseCategory extends Model
{
    use HasFactory;

    const ROOT_LEVEL = 0;
    const SECONDARY_LEVEL = 1;
    const FINAL_LEVEL = 2;

    protected $fillable = ['title', 'level', 'parent_id', 'icon'];

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        self::deleting(function ($model) {
            $service = ExpenseCategory::where("level", $model->level)->service()->first();
            var_dump($service->toArray());
            switch ($model->level) {
                case 0:
                    Transaction::query()->where("expense_root_category_id", $model->id)
                        ->update(['expense_root_category_id' => $service->id]);
                    Product::query()->where("root_category_id", $model->id)
                        ->update(['root_category_id' => $service->id]);

                    break;
                case 1:
                    Transaction::query()->where("expense_secondary_category_id", $model->id)
                        ->update(['expense_secondary_category_id' => $service->id]);
                    Product::query()->where("secondary_category_id", $model->id)
                        ->update(['secondary_category_id' => $service->id]);

                    break;
                case 2:
                    Transaction::query()->where("expense_final_category_id", $model->id)
                        ->update(['expense_final_category_id' => $service->id]);
                    Product::query()->where("final_category_id", $model->id)
                        ->update(['final_category_id' => $service->id]);

                    break;
            }

        });
    }

    public function tags()
    {
        return $this->hasMany(Tag::class);
    }

    public function parent()
    {
        return $this->belongsTo(ExpenseCategory::class, 'parent_id');
    }

    public function children()
    {
        return $this->hasMany(ExpenseCategory::class, 'parent_id');
    }

    public function rootTransactions()
    {
        return $this->hasMany(Transaction::class, 'expense_root_category_id');
    }

    public function secondaryTransactions()
    {
        return $this->hasMany(Transaction::class, 'expense_secondary_category_id');
    }

    public function finalTransactions()
    {
        return $this->hasMany(Transaction::class, 'expense_final_category_id');
    }

    public function rootProducts()
    {
        return $this->hasMany(Product::class, 'root_category_id');
    }

    public function secondaryProducts()
    {
        return $this->hasMany(Product::class, 'secondary_category_id');
    }

    public function finalProducts()
    {
        return $this->hasMany(Product::class, 'final_category_id');
    }

    public function secondaryServiceTransactions()
    {
        return $this->rootTransactions()->where(function ($q) {
            $q->whereHas('expenseSecondaryCategory', function ($q) {
                $q->service();
            })->orWhereHas('expenseFinalCategory', function ($q) {
                $q->service();
            })
                ->whereRaw("transactions.expense_root_category_id = expense_categories.id");
        });
    }

    public function finalServiceTransactions()
    {
        return $this->secondaryTransactions()->whereHas('expenseFinalCategory', function ($q) {
            $q->service();
        });
    }

    public function getRootTransactionsSumAmountAttribute($val)
    {
        return $val ?? 0;
    }

    public function getIconAttribute($value)
    {
        if ($value) return $value;

        /*if (request()->has('parent_id')) {
            $parent = ExpenseCategory::find(request()->get('parent_id'));
            if ($parent) {
                if ($parent->parent) {
                    return $parent->parent->icon;
                }
                return $parent->icon;
            }
        }*/
        if ($parentId = $this->parent_id) {
            if ($grandParentId = $this->parent->parent_id) {
                return $this->parent->parent->icon;
            }
            return $this->parent->icon;
        }
        return null;
    }

    public function scopeRoot($query)
    {
        return $query->where("level", self::ROOT_LEVEL);
    }

    public function scopeSecondary($query)
    {
        return $query->where("level", self::SECONDARY_LEVEL);
    }

    public function scopeFinal($query)
    {
        return $query->where("level", self::FINAL_LEVEL);
    }

    public function scopeService($query)
    {
        return $query->where("isService", true);
    }

    public static function findByTags($tags, $text): ExpenseCategory|null
    {
        $tags = $tags->filter(function ($tag) use ($text) {
            return mb_stripos($text, $tag->text) !== false;
        })->sortByDesc(function ($tag) use ($text) {
            return similar_text($tag->text, $text);
        })->values();

        if ($tags->count() === 0) {
            return null;
        }

        $groupedTags = $tags->groupBy('expense_category_id')->sortByDesc(function ($categoryTags) {
            return count($categoryTags);
        });

        $categoryId = $groupedTags->keys()->first();
        return ExpenseCategory::with('parent')->where("id", $categoryId)->first();
    }
}
